{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/table\";\nfunction FetchDataComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FetchDataComponent_th_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \"Date\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FetchDataComponent_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r11 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(element_r11.date);\n  }\n}\nfunction FetchDataComponent_th_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \"Temp. (C)\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FetchDataComponent_td_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(element_r12.temperatureC);\n  }\n}\nfunction FetchDataComponent_th_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \"Temp. (F)\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FetchDataComponent_td_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(element_r13.temperatureF);\n  }\n}\nfunction FetchDataComponent_th_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \"Summary\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FetchDataComponent_td_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(element_r14.summary);\n  }\n}\nfunction FetchDataComponent_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\nfunction FetchDataComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.forecasts = [];\n    this.displayedColumns = ['date', 'temperatureC', 'temperatureF', 'summary'];\n    http.get(baseUrl + 'weatherforecast').subscribe(result => {\n      this.forecasts = result;\n    }, error => console.error(error));\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 20,\n  vars: 4,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [\"mat-table\", \"\", 1, \"mat-elevation-z8\", 3, \"dataSource\"], [\"matColumnDef\", \"date\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"temperatureC\"], [\"matColumnDef\", \"temperatureF\"], [\"matColumnDef\", \"summary\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Weather forecast\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, FetchDataComponent_p_4_Template, 3, 0, \"p\", 1);\n      i0.ɵɵelementStart(5, \"table\", 2);\n      i0.ɵɵelementContainerStart(6, 3);\n      i0.ɵɵtemplate(7, FetchDataComponent_th_7_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(8, FetchDataComponent_td_8_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(9, 6);\n      i0.ɵɵtemplate(10, FetchDataComponent_th_10_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(11, FetchDataComponent_td_11_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(12, 7);\n      i0.ɵɵtemplate(13, FetchDataComponent_th_13_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(14, FetchDataComponent_td_14_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(15, 8);\n      i0.ɵɵtemplate(16, FetchDataComponent_th_16_Template, 2, 0, \"th\", 4);\n      i0.ɵɵtemplate(17, FetchDataComponent_td_17_Template, 2, 1, \"td\", 5);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(18, FetchDataComponent_tr_18_Template, 1, 0, \"tr\", 9);\n      i0.ɵɵtemplate(19, FetchDataComponent_tr_19_Template, 1, 0, \"tr\", 10);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.forecasts == null ? null : ctx.forecasts.length));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"dataSource\", ctx.forecasts);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatTable, i3.MatHeaderCellDef, i3.MatHeaderRowDef, i3.MatColumnDef, i3.MatCellDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n  encapsulation: 2\n});\nexport class TableFlexBasicExample {\n  constructor() {\n    this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n    this.dataSource = ELEMENT_DATA;\n  }\n}","map":{"version":3,"mappings":";;;;;;IA4BAA,yBAA8B;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAI7CA,8BAAsC;IAAAA,oBAAI;IAAAA,iBAAK;;;;;IAC/CA,8BAAuC;IAAAA,YAAkB;IAAAA,iBAAK;;;;IAAvBA,eAAkB;IAAlBA,sCAAkB;;;;;IAGzDA,8BAAsC;IAAAA,yBAAS;IAAAA,iBAAK;;;;;IACpDA,8BAAuC;IAAAA,YAA0B;IAAAA,iBAAK;;;;IAA/BA,eAA0B;IAA1BA,8CAA0B;;;;;IAGjEA,8BAAsC;IAAAA,yBAAS;IAAAA,iBAAK;;;;;IACpDA,8BAAuC;IAAAA,YAA0B;IAAAA,iBAAK;;;;IAA/BA,eAA0B;IAA1BA,8CAA0B;;;;;IAGjEA,8BAAsC;IAAAA,uBAAO;IAAAA,iBAAK;;;;;IAClDA,8BAAuC;IAAAA,YAAqB;IAAAA,iBAAK;;;;IAA1BA,eAAqB;IAArBA,yCAAqB;;;;;IAE9DA,yBAA4D;;;;;IAC5DA,yBAAiE;;;ACzCnE,OAAM,MAAOC,kBAAkB;EAI7BC,YAAYC,IAAgB,EAAsBC,OAAe;IAH1D,cAAS,GAAsB,EAAE;IACxC,qBAAgB,GAAa,CAAC,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE,SAAS,CAAC;IAG9ED,IAAI,CAACE,GAAG,CAAoBD,OAAO,GAAG,iBAAiB,CAAC,CAACE,SAAS,CAACC,MAAM,IAAG;MAC1E,IAAI,CAACC,SAAS,GAAGD,MAAM;IACzB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;;AARWR,kBAAkB;mBAAlBA,kBAAkB,4DAIS,UAAU;AAAA;AAJrCA,kBAAkB;QAAlBA,kBAAkB;EAAAU;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDiB/Bf,6BAAoB;MAAAA,gCAAgB;MAAAA,iBAAK;MAEzCA,yBAAG;MAAAA,0EAA0D;MAAAA,iBAAI;MAEjEA,+DAAqD;MAErDA,gCAAmE;MACjEA,gCAAkC;MAChCA,iEAA+C;MAC/CA,iEAA8D;MAChEA,0BAAe;MACfA,gCAA0C;MACxCA,mEAAoD;MACpDA,mEAAsE;MACxEA,0BAAe;MACfA,iCAA0C;MACxCA,mEAAoD;MACpDA,mEAAsE;MACxEA,0BAAe;MACfA,iCAAqC;MACnCA,mEAAkD;MAClDA,mEAAiE;MACnEA,0BAAe;MACfA,mEAA4D;MAC5DA,oEAAiE;MACnEA,iBAAQ;;;MArBJA,eAAwB;MAAxBA,6EAAwB;MAEXA,eAAwB;MAAxBA,0CAAwB;MAiBnBA,gBAAiC;MAAjCA,sDAAiC;MACpBA,eAAyB;MAAzBA,uDAAyB;;;;;;AC/B5D,OAAM,MAAOgB,qBAAqB;EAAlCd;IACE,qBAAgB,GAAa,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC;IACrE,eAAU,GAAGe,YAAY;EAC3B","names":["i0","FetchDataComponent","constructor","http","baseUrl","get","subscribe","result","forecasts","error","console","selectors","decls","vars","consts","template","TableFlexBasicExample","ELEMENT_DATA"],"sourceRoot":"","sources":["D:\\AngulerServeces2\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html","D:\\AngulerServeces2\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["<!-- <h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!forecasts?.length\"><em>Loading...</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>Date</th>\r\n      <th>Temp. (C)</th>\r\n      <th>Temp. (F)</th>\r\n      <th>Summary</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let forecast of forecasts\">\r\n      <td>{{ forecast.date }}</td>\r\n      <td>{{ forecast.temperatureC }}</td>\r\n      <td>{{ forecast.temperatureF }}</td>\r\n      <td>{{ forecast.summary }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table> -->\r\n<h1 id=\"tableLabel\">Weather forecast</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n<p *ngIf=\"!forecasts?.length\"><em>Loading...</em></p>\r\n\r\n<table mat-table [dataSource]=\"forecasts\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"date\">\r\n    <th mat-header-cell *matHeaderCellDef>Date</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.date }}</td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"temperatureC\">\r\n    <th mat-header-cell *matHeaderCellDef>Temp. (C)</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.temperatureC }}</td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"temperatureF\">\r\n    <th mat-header-cell *matHeaderCellDef>Temp. (F)</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.temperatureF }}</td>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"summary\">\r\n    <th mat-header-cell *matHeaderCellDef>Summary</th>\r\n    <td mat-cell *matCellDef=\"let element\">{{ element.summary }}</td>\r\n  </ng-container>\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n</table>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public forecasts: WeatherForecast[] = [];\r\n  displayedColumns: string[] = ['date', 'temperatureC', 'temperatureF', 'summary'];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string) {\r\n    http.get<WeatherForecast[]>(baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.forecasts = result;\r\n    }, error => console.error(error));\r\n  }\r\n}\r\nexport class TableFlexBasicExample {\r\n  displayedColumns: string[] = ['position', 'name', 'weight', 'symbol'];\r\n  dataSource = ELEMENT_DATA;\r\n}\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}