{"ast":null,"code":"import { Item } from './Classes/Item';\nimport * as i0 from \"@angular/core\";\nexport class ItemService {\n  constructor() {\n    this.items = [];\n  }\n  get item() {\n    return this.items;\n  }\n  getItem(name) {\n    return this.items.find(item => item.name === name) ?? new Item();\n  }\n  addOrUpdateItem(item) {\n    const index = this.items.findIndex(i => i.name === item.name);\n    if (index !== -1) {\n      this.updateItem(index, item);\n    } else {\n      this.addItem(item);\n    }\n  }\n}\nItemService.ɵfac = function ItemService_Factory(t) {\n  return new (t || ItemService)();\n};\nItemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ItemService,\n  factory: ItemService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,IAAI,QAAQ,gBAAgB;;AAKrC,OAAM,MAAOC,WAAW;EAIxBC;IAHQ,UAAK,GAAQ,EAAE;EAGP;EAChB,IAAIC,IAAI;IAEN,OAAO,IAAI,CAACC,KAAK;EACnB;EACAC,OAAO,CAACC,IAAW;IACnB,OAAO,IAAI,CAACF,KAAK,CAACG,IAAI,CAACJ,IAAI,IAAGA,IAAI,CAACG,IAAI,KAAGA,IAAI,CAAC,IAAE,IAAIN,IAAI,EAAE;EAC3D;EACAQ,eAAe,CAACL,IAAU;IACxB,MAAMM,KAAK,GAAG,IAAI,CAACL,KAAK,CAACM,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACL,IAAI,KAAKH,IAAI,CAACG,IAAI,CAAC;IAC7D,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACG,UAAU,CAACH,KAAK,EAAEN,IAAI,CAAC;KAC7B,MAAM;MACL,IAAI,CAACU,OAAO,CAACV,IAAI,CAAC;;EAEtB;;AAnBaF,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YAFZ;AAAM","names":["Item","ItemService","constructor","item","items","getItem","name","find","addOrUpdateItem","index","findIndex","i","updateItem","addItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngulerServeces2\\ClientApp\\src\\app\\Item.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Item } from './Classes/Item';\n\n@Injectable({\nprovidedIn: 'root'\n})\nexport class ItemService {\nprivate items:Item[]=[];\n  updateItem: any;\n  addItem: any;\nconstructor() { }\nget item()\n{\n  return this.items;\n}\ngetItem(name:string):Item{\nreturn this.items.find(item=> item.name===name)??new Item();\n}\naddOrUpdateItem(item: Item): void {\n  const index = this.items.findIndex(i => i.name === item.name);\n  if (index !== -1) {\n    this.updateItem(index, item);\n  } else {\n    this.addItem(item);\n  }\n}\nprivate addItem(item:Item):\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}